using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;
using System;
using System.Linq;

namespace autofleetapi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RentedVehicleController : ControllerBase
    {
        private readonly AutoFleetDbContext _context;

        // Constructor to inject the database context
        public RentedVehicleController(AutoFleetDbContext context)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context)); // Ensure the context is not null
        }

        // GET: api/RentedVehicle
        // Retrieves a list of all rented vehicles
        [HttpGet]
        public async Task<ActionResult<IEnumerable<RentedVehicle>>> GetRentedVehicles()
        {
            try
            {
                // Query the database to fetch the rented vehicles, including necessary details
                var rentedVehicles = await _context.RentedVehicles
                    .Select(rv => new 
                    {
                        rv.rented_vehicle_id,
                        rv.renter_id,
                        rv.vehicle_id,
                        rv.renter_fname,
                        rv.renter_lname,
                        rv.pickup_date,
                        rv.pickup_time,
                        rv.dropoff_date,
                        rv.dropoff_time,
                        rv.car_manufacturer,
                        rv.car_model,
                        rv.plate_number,
                        rv.created_at,
                        rv.updated_at,
                        rv.rent_status
                    })
                    .ToListAsync();

                // Return the rented vehicles as a successful response
                return Ok(rentedVehicles);
            }
            catch (Exception ex)
            {
                // Return an internal server error if something goes wrong
                return StatusCode(StatusCodes.Status500InternalServerError, "Error retrieving rented vehicles: " + ex.Message);
            }
        }

    // POST: api/RentedVehicle/add
    // Adds a new rented vehicle to the database
    [HttpPost("add")]
    public async Task<IActionResult> AddRentedVehicle([FromBody] RentedVehicle rentedVehicle)
    {
        if (rentedVehicle == null)
        {
            return BadRequest("Invalid rented vehicle data.");
        }

        // Ensure renter_id is provided and exists in the Renters table
        var renter = await _context.Renters.FindAsync(rentedVehicle.renter_id); 
        if (renter == null)
        {
            return BadRequest("Renter not found.");
        }

        rentedVehicle.renter_fname = renter.renter_fname; // Set the renter's first name
        rentedVehicle.renter_lname = renter.renter_lname; // Set the renter's last name

        // Ensure vehicle_id is provided and exists
        var vehicle = await _context.Vehicles.FindAsync(rentedVehicle.vehicle_id);
        if (vehicle == null)
        {
            return BadRequest("Vehicle not found.");
        }

        rentedVehicle.car_manufacturer = vehicle.car_manufacturer; // Set vehicle's manufacturer
        rentedVehicle.car_model = vehicle.car_model; // Set vehicle's model
        rentedVehicle.plate_number = vehicle.plate_number; // Set vehicle's plate number

        // Set the creation and update timestamps
        rentedVehicle.created_at = DateTime.UtcNow;
        rentedVehicle.updated_at = DateTime.UtcNow;

        // Do not manually set rented_vehicle_id, it will be auto-generated by the database
        rentedVehicle.rented_vehicle_id = 0;  

        
        rentedVehicle.rent_status = "Upcoming"; // Default status for new rentals

        // Add the rented vehicle to the database and save the changes
        _context.RentedVehicles.Add(rentedVehicle);
        await _context.SaveChangesAsync();

        // Return the newly created rented vehicle
        return Ok(rentedVehicle);
    }


        // GET: api/RentedVehicle/{id}
        // Retrieves a single rented vehicle by its ID
        [HttpGet("{id}")]
        public async Task<ActionResult<RentedVehicle>> GetRentedVehicle(int id)
        {
            // Query the rented vehicle by its ID
            var rentedVehicle = await _context.RentedVehicles
                .Where(rv => rv.rented_vehicle_id == id)
                .Select(rv => new
                {
                    rv.rented_vehicle_id,
                    rv.renter_id,
                    rv.vehicle_id,
                    rv.renter_fname,
                    rv.renter_lname,
                    rv.pickup_date,
                    rv.pickup_time,
                    rv.dropoff_date,
                    rv.dropoff_time,
                    rv.car_manufacturer,
                    rv.car_model,
                    rv.plate_number,
                    rv.created_at,
                    rv.updated_at,
                    rv.rent_status
                })
                .FirstOrDefaultAsync();

            // Return NotFound if the rented vehicle does not exist
            if (rentedVehicle == null)
            {
                return NotFound();
            }

            // Return the found rented vehicle
            return Ok(rentedVehicle);
        }

        // PUT: api/RentedVehicle/{id}
        // Updates an existing rented vehicle by its ID
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateRentedVehicle(int id, [FromBody] RentedVehicle rentedVehicle)
        {
            if (id != rentedVehicle.rented_vehicle_id)
            {
                // Return BadRequest if the provided ID does not match the rented vehicle's ID
                return BadRequest("Vehicle ID mismatch.");
            }

            rentedVehicle.updated_at = DateTime.UtcNow; // Set the update timestamp

            // Mark the rented vehicle as modified in the context
            _context.Entry(rentedVehicle).State = EntityState.Modified;

            try
            {
                // Save changes to the database
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Handle concurrency exceptions and check if the rented vehicle exists
                if (!RentedVehicleExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            // Return NoContent to indicate successful update
            return NoContent();
        }

        // GET: api/RentedVehicle/latest-id
        // Retrieves the latest rented vehicle ID (highest ID number)
        [HttpGet("latest-id")]
        public async Task<IActionResult> GetLatestRentedVehicleId()
        {
            // Query for the highest rented_vehicle_id from the RentedVehicles table
            var latestId = await _context.RentedVehicles
                .OrderByDescending(rv => rv.rented_vehicle_id)   // Order by descending ID
                .Select(rv => rv.rented_vehicle_id)             // Select only the ID 
                .FirstOrDefaultAsync();

            // Return the latest ID
            return Ok(latestId);
        }

        // DELETE: api/RentedVehicle/{id}
        // Deletes a rented vehicle by its ID
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteRentedVehicle(int id)
        {
            // Find the rented vehicle by its ID
            var rentedVehicle = await _context.RentedVehicles.FindAsync(id);

            // Return NotFound if the rented vehicle does not exist
            if (rentedVehicle == null)
            {
                return NotFound();
            }

            // Remove the rented vehicle from the database
            _context.RentedVehicles.Remove(rentedVehicle);
            await _context.SaveChangesAsync();

            // Return NoContent to indicate successful deletion
            return NoContent();
        }

        // Helper method to check if a rented vehicle exists in the database
        private bool RentedVehicleExists(int id)
        {
            return _context.RentedVehicles.Any(e => e.rented_vehicle_id == id);
        }
    }
}
